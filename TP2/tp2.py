# -*- coding: utf-8 -*-
"""Copia de TP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125ArrqhNPhBKsMAs-QRlEDB0Lfo0Lm4L

# Código de inicialización
Este código permite inicializar las bibliotecas para usar SQLite en la máquina virtual de Google Colab. El código además elimina cualquier dato almacenado anteriormente en el archvio `ejemplos.db`. Es recomendable volver a correr el código cada vez que se comience con la resolución de un nuevo ejercicio.
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install pymysql
# %load_ext sql
!rm -rf ejemplos.db
# %sql sqlite:///ejemplos.db

"""# TP2: Ejercicios de SQL

## EJERCICIO 1:  Base de datos para un club náutico

### Descripción:
Se quiere diseñar una base de datos relacional para gestionar los datos de los socios de un club náutico. De cada socio se guardan los datos personales y la información de los barcos que posee:
- Número de matrícula, nombre, número de amarre, cuota.

Además, se almacena información sobre las salidas realizadas por cada barco:
- Fecha y hora de salida, destino y datos del patrón (que no tiene que ser el propietario ni un socio del club).

### Esquema propuesto:
- Tabla `Socios`: Almacena la información de los socios del club.
- Tabla `Barcos`: Almacena la información de los barcos y sus propietarios.
- Tabla `Salidas`: Almacena la información de las salidas realizadas por los barcos.

### Esquema de tablas
Este sería el esquema de tablas en lenguaje DBML

```dbml
Table Socios {
    id_socio INT [pk]
    nombre VARCHAR(100)
    direccion VARCHAR(255)
}

Table Barcos {
    matricula VARCHAR(20) [pk]
    nombre VARCHAR(100)
    numero_amarre INT
    cuota DECIMAL(10, 2)
    id_socio INT [ref: > Socios.id_socio]
}

Table Salidas {
    id_salida INT [pk]
    matricula VARCHAR(20) [ref: > Barcos.matricula]
    fecha_salida DATE
    hora_salida TIME
    destino VARCHAR(100)
    patron_nombre VARCHAR(100)
    patron_direccion VARCHAR(255)
}
```

### Escriba abajo el código SQL necesario para crear las tablas:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# CREATE TABLE Socios (
#     id_socio INT PRIMARY KEY,
#     nombre VARCHAR(100) NOT NULL,
#     direccion VARCHAR(255) NOT NULL
# );
# 
# CREATE TABLE Barcos (
#     matricula VARCHAR(20) PRIMARY KEY,
#     nombre VARCHAR(100) NOT NULL,
#     numero_amarre INT NOT NULL,
#     cuota DECIMAL(10, 2) NOT NULL,
#     id_socio INT,
#     FOREIGN KEY (id_socio) REFERENCES Socios(id_socio)
# );
# 
# CREATE TABLE Salidas (
#     id_salida INT PRIMARY KEY,
#     matricula VARCHAR(20),
#     fecha_salida DATE NOT NULL,
#     hora_salida TIME NOT NULL,
#     destino VARCHAR(100) NOT NULL,
#     patron_nombre VARCHAR(100) NOT NULL,
#     patron_direccion VARCHAR(255) NOT NULL,
#     FOREIGN KEY (matricula) REFERENCES Barcos(matricula)
# );
# 
#

"""El código SQL de abajo le permite popular (es decir, rellenar) las tablas con datos."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# -- Populación de las tablas
# INSERT INTO Socios (id_socio, nombre, direccion)
# VALUES
# (1, 'Juan Pérez', 'Calle Mayor 1, Madrid'),
# (2, 'Ana García', 'Calle Luna 5, Barcelona'),
# (3, 'Luis Fernández', 'Avenida del Sol 10, Valencia'),
# (4, 'Laura Sánchez', 'Plaza del Mar 3, Alicante'),
# (5, 'Carlos López', 'Calle Río 8, Sevilla'),
# (6, 'Marta Díaz', 'Calle de la Sierra 12, Zaragoza'),
# (7, 'Pedro Gómez', 'Calle Nueva 20, Bilbao'),
# (8, 'Lucía Jiménez', 'Calle Real 30, Madrid'),
# (9, 'María Torres', 'Calle Verde 15, Málaga'),
# (10, 'Fernando Martín', 'Calle Azul 25, Murcia');
# 
# INSERT INTO Barcos (matricula, nombre, numero_amarre, cuota, id_socio)
# VALUES
# ('ABC123', 'El Viento', 12, 600.50, 1),
# ('DEF456', 'La Brisa', 8, 450.00, 2),
# ('GHI789', 'El Sol', 15, 700.00, 3),
# ('JKL012', 'El Mar', 10, 550.75, 4),
# ('MNO345', 'La Luna', 18, 620.30, 5),
# ('PQR678', 'El Horizonte', 20, 780.90, 6),
# ('STU901', 'El Amanecer', 5, 400.00, 7),
# ('VWX234', 'La Estrella', 7, 520.50, 8),
# ('YZA567', 'La Marea', 14, 480.75, 9),
# ('BCD890', 'El Océano', 6, 630.80, 10);
# 
# INSERT INTO Salidas (id_salida, matricula, fecha_salida, hora_salida, destino, patron_nombre, patron_direccion)
# VALUES
# (1, 'ABC123', '2023-07-15', '10:30:00', 'Mallorca', 'Patrón 1', 'Calle de la Playa 1, Palma'),
# (2, 'DEF456', '2023-07-20', '09:00:00', 'Ibiza', 'Patrón 2', 'Avenida del Puerto 3, Valencia'),
# (3, 'GHI789', '2023-07-22', '08:45:00', 'Menorca', 'Patrón 3', 'Calle de la Costa 10, Alicante'),
# (4, 'JKL012', '2023-07-25', '11:15:00', 'Mallorca', 'Patrón 4', 'Plaza del Faro 5, Barcelona'),
# (5, 'MNO345', '2023-08-01', '14:00:00', 'Formentera', 'Patrón 5', 'Calle del Puerto 20, Ibiza'),
# (6, 'PQR678', '2023-08-05', '07:30:00', 'Mallorca', 'Patrón 6', 'Calle de las Olas 15, Palma'),
# (7, 'STU901', '2023-08-10', '12:00:00', 'Ibiza', 'Patrón 7', 'Avenida de la Marina 7, Barcelona'),
# (8, 'VWX234', '2023-08-12', '09:30:00', 'Cabrera', 'Patrón 8', 'Calle del Mar 12, Alicante'),
# (9, 'YZA567', '2023-08-15', '10:00:00', 'Formentera', 'Patrón 9', 'Calle del Sol 4, Ibiza'),
# (10, 'BCD890', '2023-08-20', '08:00:00', 'Menorca', 'Patrón 10', 'Plaza del Faro 2, Palma');
#

"""### Resolver estas consignas sin usar JOIN:
Estas consirgnas deben resolverse usando lo visto en la clase del lunes 16/09 antes de ver la parte de JOIN. Esto es: subconsultas, etc.
1. ¿Qué socios tienen barcos amarrados en un número de amarre mayor que 10?
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# select * from Socios
# 
# where id_socio in (select id_socio from Barcos where numero_amarre > 10)

"""2. ¿Cuáles son los nombres de los barcos y sus cuotas de aquellos barcos cuyo socio se llama 'Juan Pérez'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# 
# SELECT nombre, cuota
# FROM Barcos
# WHERE id_socio = (
#     SELECT id_socio
#     FROM Socios
#     WHERE nombre = 'Juan Pérez'
# );
#

"""3. ¿Cuántas salidas ha realizado el barco con matrícula 'ABC123'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT COUNT(*) AS total_salidas
# FROM Salidas
# WHERE matricula = 'ABC123';
#

"""4. Lista los barcos que tienen una cuota mayor a 500 y sus respectivos socios."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT nombre,
#        (SELECT nombre
#         FROM Socios
#         WHERE Socios.id_socio = Barcos.id_socio) AS nombre_socio
# FROM Barcos
# WHERE cuota > 500;
#

"""5. ¿Qué barcos han salido con destino a 'Mallorca'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT (SELECT nombre
#         FROM Barcos
#         WHERE Barcos.matricula = Salidas.matricula) AS nombre_barco
# FROM Salidas
# WHERE destino = 'Mallorca';
#

"""6. ¿Qué patrones (nombre y dirección) han llevado un barco cuyo socio vive en 'Barcelona'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT patron_nombre, patron_direccion
# FROM Salidas
# WHERE matricula IN (
#     SELECT matricula
#     FROM Barcos
#     WHERE id_socio IN (
#         SELECT id_socio
#         FROM Socios
#         WHERE direccion = 'Barcelona'
#     )
# );
#

"""### Resolver nuevamentos los incisos, pero ahora usa JOIN
1. ¿Qué socios tienen barcos amarrados en un número de amarre mayor que 10?
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Socios.nombre AS nombre_socio, Barcos.nombre AS nombre_barco
# FROM Socios
# JOIN Barcos ON Socios.id_socio = Barcos.id_socio
# WHERE Barcos.numero_amarre > 10;
#

"""2. ¿Cuáles son los nombres de los barcos y sus cuotas de aquellos barcos cuyo socio se llama 'Juan Pérez'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Barcos.nombre AS nombre_barco, Barcos.cuota
# FROM Barcos
# JOIN Socios ON Barcos.id_socio = Socios.id_socio
# WHERE Socios.nombre = 'Juan Pérez';
# 
#

"""3. ¿Cuántas salidas ha realizado el barco con matrícula 'ABC123'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT COUNT(*) AS total_salidas
# FROM Salidas
# JOIN Barcos ON Salidas.matricula = Barcos.matricula
# WHERE Barcos.matricula = 'ABC123';
#

"""4. Lista los barcos que tienen una cuota mayor a 500 y sus respectivos socios."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Barcos.nombre AS nombre_barco,
#        Barcos.cuota,
#        Socios.nombre AS nombre_socio
# FROM Barcos
# JOIN Socios ON Barcos.id_socio = Socios.id_socio
# WHERE Barcos.cuota > 500;
#

"""5. ¿Qué barcos han salido con destino a 'Mallorca'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Barcos.nombre AS nombre_barco
# FROM Salidas
# JOIN Barcos ON Salidas.matricula = Barcos.matricula
# WHERE Salidas.destino = 'Mallorca';
# 
#

"""6. ¿Qué patrones (nombre y dirección) han llevado un barco cuyo socio vive en 'Barcelona'?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Salidas.patron_nombre,
#        Salidas.patron_direccion
# FROM Salidas
# JOIN Barcos ON Salidas.matricula = Barcos.matricula
# JOIN Socios ON Barcos.id_socio = Socios.id_socio
# WHERE Socios.direccion = 'Barcelona';
#

"""
## EJERCICIO 2: Base de datos para un gabinete de abogados

### Descripción:
Se quiere diseñar una base de datos relacional para almacenar información sobre los asuntos que lleva un gabinete de abogados. Cada asunto tiene un número de expediente que lo identifica y corresponde a un solo cliente. Del asunto se debe almacenar:
- Período (fecha de inicio y fecha de archivo o finalización)
- Estado (en trámite, archivado, etc.)
- Datos personales del cliente (DNI, nombre, dirección, etc.)

Algunos asuntos son llevados por uno o varios procuradores, de los que nos interesa también almacenar los datos personales.

### Esquema propuesto:
- Tabla `Clientes`: Almacena la información de los clientes: dni (clave primaria), nombre y dirección.
- Tabla `Asuntos`: Almacena la información de los asuntos: numero de expediente (clave primaria), dni del cliente (clave externa), fecha de inicio, fecha de fin y estado (Abierto o Cerrado). Si el asunto está abierto, no tiene fecha de fin.
- Tabla `Procuradores`: Almacena la información de los procuradores: id del procurador (clave priaria), nombre y dirección.
- Tabla `Asuntos_Procuradores`: Relaciona los asuntos con los procuradores (muchos a muchos).

### SQL para crear las tablas:
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# CREATE TABLE Clientes (
#     dni VARCHAR(20) PRIMARY KEY,
#     nombre VARCHAR(100) NOT NULL,
#     direccion VARCHAR(255) NOT NULL
# );
# 
# CREATE TABLE Asuntos (
#     numero_expediente INT PRIMARY KEY,
#     dni_cliente VARCHAR(20),
#     fecha_inicio DATE NOT NULL,
#     fecha_fin DATE,
#     estado VARCHAR(20) CHECK (estado IN ('Abierto', 'Cerrado')),
#     FOREIGN KEY (dni_cliente) REFERENCES Clientes(dni)
# );
# 
# CREATE TABLE Procuradores (
#     id_procurador INT PRIMARY KEY,
#     nombre VARCHAR(100) NOT NULL,
#     direccion VARCHAR(255) NOT NULL
# );
# 
# CREATE TABLE Asuntos_Procuradores (
#     numero_expediente INT,
#     id_procurador INT,
#     PRIMARY KEY (numero_expediente, id_procurador),
#     FOREIGN KEY (numero_expediente) REFERENCES Asuntos(numero_expediente),
#     FOREIGN KEY (id_procurador) REFERENCES Procuradores(id_procurador)
# );
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# -- Poblar la tabla Clientes
# INSERT INTO Clientes (dni, nombre, direccion)
# VALUES
# ('123456789', 'Juan Pérez', 'Calle Pueyrredón 3498, Buenos Aires'),
# ('987654321', 'Ana García', 'Calle 5 323, La Plata'),
# ('456123789', 'Luis Fernández', 'Avenida de Gral. Paz 1056, Bahía Blanca');
# 
# -- Poblar la tabla Asuntos
# INSERT INTO Asuntos (numero_expediente, dni_cliente, fecha_inicio, fecha_fin, estado)
# VALUES
# (1, '123456789', '2023-01-15', '2023-07-20', 'Cerrado'),
# (2, '987654321', '2023-05-10', NULL, 'Abierto'),
# (3, '456123789', '2023-06-01', '2023-09-10', 'Cerrado');
# 
# -- Poblar la tabla Procuradores
# INSERT INTO Procuradores (id_procurador, nombre, direccion)
# VALUES
# (1, 'Laura Sánchez', 'Calle Soler 3765, Buenos Aires'),
# (2, 'Carlos López', 'Calle Estrellas 8, Mar del Plata'),
# (3, 'Marta Díaz', 'Calle Estación 12, Olavarria');
# 
# -- Poblar la tabla Asuntos_Procuradores
# INSERT INTO Asuntos_Procuradores (numero_expediente, id_procurador)
# VALUES
# (1, 1),
# (2, 2),
# (3, 3),
# (2, 1);  -- Un asunto puede tener varios procuradores
#

"""### Resolver estas consignas usando _únicamente_ JOIN en las consultas:
1. ¿Cuál es el nombre y la dirección de los procuradores que han trabajado en un asunto abierto?
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Procuradores.nombre AS nombre_procurador,
#        Procuradores.direccion AS direccion_procurador
# FROM Asuntos_Procuradores
# JOIN Procuradores ON Asuntos_Procuradores.id_procurador = Procuradores.id_procurador
# JOIN Asuntos ON Asuntos_Procuradores.numero_expediente = Asuntos.numero_expediente
# WHERE Asuntos.estado = 'Abierto';
# 
#

"""2. ¿Qué clientes han tenido asuntos en los que ha participado el procurador Carlos López?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Clientes.nombre AS nombre_cliente,
#        Clientes.direccion AS direccion_cliente
# FROM Clientes
# JOIN Asuntos ON Clientes.dni = Asuntos.dni_cliente
# JOIN Asuntos_Procuradores ON Asuntos.numero_expediente = Asuntos_Procuradores.numero_expediente
# JOIN Procuradores ON Asuntos_Procuradores.id_procurador = Procuradores.id_procurador
# WHERE Procuradores.nombre = 'Carlos López';
# 
#

"""3. ¿Cuántos asuntos ha gestionado cada procurador?"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Procuradores.nombre AS nombre_procurador,
#        COUNT(Asuntos_Procuradores.numero_expediente) AS total_asuntos
# FROM Procuradores
# LEFT JOIN Asuntos_Procuradores ON Procuradores.id_procurador = Asuntos_Procuradores.id_procurador
# GROUP BY Procuradores.id_procurador, Procuradores.nombre;

"""4. Lista los números de expediente y fechas de inicio de los asuntos de los clientes que viven en Buenos Aires."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# 
# SELECT Asuntos.numero_expediente,
#        Asuntos.fecha_inicio
# FROM Asuntos
# JOIN Clientes ON Asuntos.dni_cliente = Clientes.dni
# WHERE Clientes.direccion LIKE '%Buenos Aires%';
#

"""# Entrega
La entrega consiste en completar esta hoja y subirla a su repositorio GIT
Se deben entregar también los diagramas de esquema de tablas como imagenes aparte.
Fecha límite: 30 de septiembre a las 23:59 hs
"""